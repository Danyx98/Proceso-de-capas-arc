import arcpy
from arcpy import env
import os

# Definir el directorio donde están almacenados los shapefiles
workspace = r'C:\Users\Dan\OneDrive\Escritorio\UCR\2024 II Ciclo\Teledetección y modelación ambiental\Caso 2\Caso2\Caso2.gdb' # OBLIGATORIO CAMBIAR
env.workspace = workspace

# Carpeta de salida (geodatabase)
output_folder = r'C:\Users\Dan\OneDrive\Escritorio\UCR\2024 II Ciclo\Teledetección y modelación ambiental\Caso 2\Caso2\Caso2.gdb' # OBLIGATORIO CAMBIAR

# Definir parámetros del fishnet
cell_size = 1000  # Tamaño de celda en unidades del sistema de coordenadas de cada shapefile # Este dato lo dio la profe

# Obtener la lista de shapefiles existentes al inicio
existing_shapefiles = arcpy.ListFeatureClasses()

# Iterar sólo sobre los shapefiles que existían al inicio, ya que sino hace loop de capas
for shapefile in existing_shapefiles:
    try:
        # Obtener la proyección actual
        spatial_ref = arcpy.Describe(shapefile).spatialReference
        epsg_code = spatial_ref.factoryCode
        
        # Definir la extensión del fishnet basándose en la capa
        extent = arcpy.Describe(shapefile).extent
        
        # Nombre del fishnet de salida (sin .shp)
        fishnet_name = 'fishnet_{}'.format(shapefile.split(".")[0].replace(" ", "_"))  # Quitar espacios en el nombre, ya que sino se buguea
        output_fishnet = os.path.join(output_folder, fishnet_name)
        
        # Coordenadas para el origen y y_axis (en formato de cadena correcta)
        origin_coord = f"{extent.XMin} {extent.YMin}"
        y_axis_coord = f"{extent.XMin} {extent.YMax}"
        corner_coord = f"{extent.XMax} {extent.YMax}"

        # Crear fishnet para el shapefile con su EPSG original
        arcpy.CreateFishnet_management(output_fishnet, 
                                       origin_coord, 
                                       y_axis_coord, 
                                       cell_size, cell_size, 
                                       0, 0, 
                                       corner_coord, 
                                       "NO_LABELS", shapefile, "POLYGON")
        
        # Reparar geometría antes de continuar
        arcpy.RepairGeometry_management(output_fishnet)
        arcpy.RepairGeometry_management(shapefile)

        # Realizar un clip del fishnet con el shapefile original usando Clip_analysis
        clipped_fishnet = os.path.join(output_folder, f'clipped_fishnet_{shapefile.split(".")[0].replace(" ", "_")}')
        arcpy.Clip_analysis(output_fishnet, shapefile, clipped_fishnet)

        # Realizar el Spatial Join para que los cuadros del fishnet tengan los atributos del shapefile original
        fishnet_with_attributes = os.path.join(output_folder, f'joined_fishnet_{shapefile.split(".")[0].replace(" ", "_")}')
        arcpy.SpatialJoin_analysis(clipped_fishnet, shapefile, fishnet_with_attributes, "JOIN_ONE_TO_ONE", "KEEP_COMMON")

        # Unir el shapefile original con el fishnet recortado
        output_combined = os.path.join(output_folder, f'FN_{shapefile.split(".")[0].replace(" ", "_")}')
        arcpy.Merge_management([shapefile, fishnet_with_attributes], output_combined)

        print(f'Archivo creado: {output_combined} con EPSG: {epsg_code}')
    
    except arcpy.ExecuteError as e:
        print(f'Error en ArcPy al procesar {shapefile}: {e}')
        continue  # Continuar con el siguiente shapefile por si alguno falla
    except Exception as e:
        print(f'Error inesperado al procesar {shapefile}: {e}')
        continue  # Continuar con el siguiente shapefile por si alguno falla
